#!/usr/bin/env php
<?php
function includeIfExists($file)
{
    if (file_exists($file)) {
        return include $file;
    }
}

if ((!$loader = includeIfExists(__DIR__.'/vendor/autoload.php')) && (!$loader = includeIfExists(__DIR__.'/../../autoload.php'))) {
    die('You must set up the project dependencies, run the following commands:'.PHP_EOL.
        'curl -sS https://getcomposer.org/installer | php'.PHP_EOL.
        'php composer.phar install'.PHP_EOL);
}

use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\ErrorHandler\Debug;
use Symfony\Component\Dotenv\Dotenv;
use Kimeo\GitHubGenerator;

Debug::enable();

$dotenv = new Dotenv();
$dotenv->load(__DIR__ . '/.env');

/**
 * @author MickaÃ«l Andrieu <andrieu.travail@gmail.com>
 *
 * A simple CLI tool to generate GitHub activity report.
 */
(new SingleCommandApplication())
    ->setName('kimeo:generate')
    ->setVersion('2.0.0')
    ->addArgument('from', InputArgument::REQUIRED, 'Starting date in Y-m-d format')
    ->addArgument('to', InputArgument::REQUIRED, 'Ending date in Y-m-d format')
    ->addArgument('branches', InputArgument::REQUIRED|InputArgument::IS_ARRAY, 'The filtered git branches')
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $io = new SymfonyStyle($input, $output);

        $user = $_ENV['GITHUB_LOGIN'];
        $password = $_ENV['GITHUB_PASSWORD'];
        $owner = $_ENV['GITHUB_OWNER'];
        $project = $_ENV['GITHUB_REPOSITORY'];

        $from = new DateTime($input->getArgument('from'));
        $to = new DateTime($input->getArgument('to'));
        $branches = $input->getArgument('branches');

        $generator = new GitHubGenerator($user, $password, $owner, $project);
        $generator->generate($from, $to, $branches);
        
        (new Filesystem())->dumpFile('report.md', $generator->getReport());
        $io->success('File `report.md` generated without any errors.');
    })
    ->run();
